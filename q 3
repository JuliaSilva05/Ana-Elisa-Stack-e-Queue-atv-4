// Esboço do código de uma Queue de números inteiros implementada utilizando utilizando uma estrutura sequencial (vetor).
// Implementar as partes do código que estão incompletas.

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define TAM  10
typedef struct queue {
    int dados[TAM];
    int inicio, fim;
} Queue;

void inicializar(Queue* fila) {
    int i;
    fila->inicio = -1;
    fila->fim = -1;
    for (i = 0; i < TAM; i++) {
        fila->dados[i] = 0;
    }
}

int isFull(Queue fila) { // checa se a fila está cheia
    if (fila.fim == TAM - 1) {
        return 0; // se estiver cheio retorna 0
    } else{
      return 1; // se não estiver cheio retorna 1
    }
}

int isEmpty(Queue fila) { // checa se a fila está vazia
    if (fila.inicio == -1 && fila.fim == -1){
      return 0;
    } // vê se o inicio é -1 e o fim é -1
    else{
      fila.inicio = 0;
      return 1; //se não, retorna 1
    }
}

void enqueue(Queue* fila, int valor) { // enfileirar
    fila->inicio = 0;
    if (isFull(*fila)==1){ // se nao estiver cheio
      fila->fim++; //o fim está mais adiante
      fila->dados[fila->fim] = valor; // o último lugar é igual ao valor
    }

}

int dequeue(Queue* fila) {  // desenfileirar
    int i;
    int desaloc = fila->dados[0];// variavel para o valor desalocado
    for (i = 0; i < fila->fim;i++){
      fila->dados[i] = fila->dados[i+1];
    }
    fila->dados[fila->fim] = 0; // o ultimo é zerado
  
    fila->fim--; // o fim agora diminui
    if (fila->fim == -1){
      fila->inicio = -1; // se fim é -1, o inicio é -1 tambem 
    }
    
    return desaloc; //retorna o valor desalocado
}

int head(Queue fila) {   // retornar o valor que está no início da fila
    return fila.dados[0]; // retornar a primeira posição do vetor dados
}



void exibirOpcoes() {
    printf("\nOpções: \n");
    printf("1 - Enqueue \n");
    printf("2 - Dequeue \n");
    printf("3 - Head \n");
    printf("0 - Encerrar programa \n");
    printf("Informe a opção desejada: ");
}

int main()
{
    Queue minhaFila;
    inicializar(&minhaFila);
    int op, num;
    do {
        exibirOpcoes();
        scanf("%d", &op);
        switch (op) {
        case 1: printf("Informe o valor: "); // queue
            scanf("%d", &num);
            if (isFull(minhaFila) == 1) { 
                enqueue(&minhaFila, num);
                printf("Valor enfileirado!\n");
            }//se nao tiver cheio
            else {
                printf("Queue full!\n");
            }
            break;
        case 2: // dequeue
            if (isEmpty(minhaFila) == 0){ //se for vazio
              printf("Queue vazia!\n");
            } else{
              printf("Valor desenfileirado: %d\n", dequeue(&minhaFila));
            }
            break;
        case 3: // head
           if (isEmpty(minhaFila) == 0){ //se for vazia
             printf("Queue vazia!\n");
           } else{ //se nao for vazia
             printf("Valor do início da fila: %d\n",head(minhaFila));
           }
            break;
        case 0: printf("Fim de programa!");
            break;
        default: printf("Opção inválida!\n");
          
          // fiz esse pedacinho abaixo para poder ver o vetor, o inicio e o fim, para ver se tava tudo certo
          /*
            for (int i = 0; i < TAM; i++){
              printf("%d, ", minhaFila.dados[i]);
            }
            printf("\n");
            printf("Inicio: %d, Fim: %d\n", minhaFila.inicio,minhaFila.fim);
          */
        }
    } while (op != 0);
    return 0;
}
